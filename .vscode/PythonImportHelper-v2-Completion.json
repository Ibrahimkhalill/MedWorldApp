[
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "transaction",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "string",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "string",
        "description": "string",
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "api_view",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "authentication_classes",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "permission_classes",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "RefreshToken",
        "importPath": "rest_framework_simplejwt.tokens",
        "description": "rest_framework_simplejwt.tokens",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.tokens",
        "documentation": {}
    },
    {
        "label": "Token",
        "importPath": "rest_framework.authtoken.models",
        "description": "rest_framework.authtoken.models",
        "isExtraImport": true,
        "detail": "rest_framework.authtoken.models",
        "documentation": {}
    },
    {
        "label": "authenticate",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "JWTAuthentication",
        "importPath": "rest_framework_simplejwt.authentication",
        "description": "rest_framework_simplejwt.authentication",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.authentication",
        "documentation": {}
    },
    {
        "label": "TokenAuthentication",
        "importPath": "rest_framework.authentication",
        "description": "rest_framework.authentication",
        "isExtraImport": true,
        "detail": "rest_framework.authentication",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "EmailMultiAlternatives",
        "importPath": "django.core.mail",
        "description": "django.core.mail",
        "isExtraImport": true,
        "detail": "django.core.mail",
        "documentation": {}
    },
    {
        "label": "render_to_string",
        "importPath": "django.template.loader",
        "description": "django.template.loader",
        "isExtraImport": true,
        "detail": "django.template.loader",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "FileResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "Workbook",
        "importPath": "openpyxl",
        "description": "openpyxl",
        "isExtraImport": true,
        "detail": "openpyxl",
        "documentation": {}
    },
    {
        "label": "FPDF",
        "importPath": "fpdf",
        "description": "fpdf",
        "isExtraImport": true,
        "detail": "fpdf",
        "documentation": {}
    },
    {
        "label": "gspread",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gspread",
        "description": "gspread",
        "detail": "gspread",
        "documentation": {}
    },
    {
        "label": "ServiceAccountCredentials",
        "importPath": "oauth2client.service_account",
        "description": "oauth2client.service_account",
        "isExtraImport": true,
        "detail": "oauth2client.service_account",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "mainapp.migrations.0001_initial",
        "description": "mainapp.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Surgery',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "mainapp.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "mainapp.migrations.0002_surgery_date",
        "description": "mainapp.migrations.0002_surgery_date",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('mainapp', '0001_initial'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='surgery',\n            name='date',\n            field=models.DateField(blank=True, null=True),\n        ),",
        "detail": "mainapp.migrations.0002_surgery_date",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "mainapp.migrations.0003_otp",
        "description": "mainapp.migrations.0003_otp",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('mainapp', '0002_surgery_date'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='OTP',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('email', models.EmailField(blank=True, max_length=254, null=True)),",
        "detail": "mainapp.migrations.0003_otp",
        "documentation": {}
    },
    {
        "label": "MainappConfig",
        "kind": 6,
        "importPath": "mainapp.apps",
        "description": "mainapp.apps",
        "peekOfCode": "class MainappConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'mainapp'",
        "detail": "mainapp.apps",
        "documentation": {}
    },
    {
        "label": "OTP",
        "kind": 6,
        "importPath": "mainapp.models",
        "description": "mainapp.models",
        "peekOfCode": "class OTP(models.Model):\n    email = models.EmailField(null=True, blank=True)\n    otp = models.CharField(max_length=5)\n    created_at = models.DateTimeField(auto_now_add=True)\n    attempts = models.IntegerField(default=0)  \n    def __str__(self):\n        return f'OTP for {self.email}: {self.otp}'\n    def save(self, *args, **kwargs):\n        with transaction.atomic():\n            # Delete existing OTPs for the same email",
        "detail": "mainapp.models",
        "documentation": {}
    },
    {
        "label": "UserProfile",
        "kind": 6,
        "importPath": "mainapp.models",
        "description": "mainapp.models",
        "peekOfCode": "class UserProfile(models.Model):\n    user = models.OneToOneField(User, on_delete=models.CASCADE, blank=True, null=True)\n    email = models.CharField(max_length=200, blank=True, null=True)\n    phone_number = models.CharField(max_length=20, blank=True, null=True)\n    designation = models.CharField(max_length=200, blank=True, null=True)\n    profile_picture = models.ImageField(upload_to=\"user\", blank=True, null=True)\n    def __str__(self):\n        return self.user.username  \nclass Surgery(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE, null=True, blank=True)",
        "detail": "mainapp.models",
        "documentation": {}
    },
    {
        "label": "Surgery",
        "kind": 6,
        "importPath": "mainapp.models",
        "description": "mainapp.models",
        "peekOfCode": "class Surgery(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE, null=True, blank=True)\n    name_of_surgery = models.TextField(blank=True, null=True)\n    type_of_surgery = models.TextField(blank=True, null=True)\n    complications = models.TextField(blank=True, null=True)\n    date = models.DateField(blank=True,null=True)",
        "detail": "mainapp.models",
        "documentation": {}
    },
    {
        "label": "generate_otp",
        "kind": 2,
        "importPath": "mainapp.otpGenarate",
        "description": "mainapp.otpGenarate",
        "peekOfCode": "def generate_otp(length=6):\n    digits = string.digits\n    return ''.join(random.choices(digits, k=length))",
        "detail": "mainapp.otpGenarate",
        "documentation": {}
    },
    {
        "label": "UserSerializer",
        "kind": 6,
        "importPath": "mainapp.serializers",
        "description": "mainapp.serializers",
        "peekOfCode": "class UserSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = User\n        fields = ['id', 'username',]  \n# Serializer for UserProfile\nclass UserProfileSerializer(serializers.ModelSerializer):\n    user = UserSerializer(read_only=True)\n    class Meta:\n        model = UserProfile\n        fields = ['user', 'phone_number', 'designation', 'profile_picture']",
        "detail": "mainapp.serializers",
        "documentation": {}
    },
    {
        "label": "UserProfileSerializer",
        "kind": 6,
        "importPath": "mainapp.serializers",
        "description": "mainapp.serializers",
        "peekOfCode": "class UserProfileSerializer(serializers.ModelSerializer):\n    user = UserSerializer(read_only=True)\n    class Meta:\n        model = UserProfile\n        fields = ['user', 'phone_number', 'designation', 'profile_picture']\n# Serializer for Surgery\nclass SurgerySerializer(serializers.ModelSerializer):\n    user = UserSerializer(read_only=True)\n    class Meta:\n        model = Surgery",
        "detail": "mainapp.serializers",
        "documentation": {}
    },
    {
        "label": "SurgerySerializer",
        "kind": 6,
        "importPath": "mainapp.serializers",
        "description": "mainapp.serializers",
        "peekOfCode": "class SurgerySerializer(serializers.ModelSerializer):\n    user = UserSerializer(read_only=True)\n    class Meta:\n        model = Surgery\n        fields = ['id','user', 'name_of_surgery', 'type_of_surgery', 'complications','date']",
        "detail": "mainapp.serializers",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "mainapp.urls",
        "description": "mainapp.urls",
        "peekOfCode": "urlpatterns = [\n   path(\"login/\", login),\n   path(\"register/\", register),\n   path(\"send-otp/\", send_otp),\n   path(\"verify-otp/\", verify_otp),\n   path(\"google-register/\", google_register),\n   path(\"google-login/\", google_login),\n   path(\"password-reset-otp/\", Password_reset_send_otp),\n   path(\"password-reset/\", reset_password),\n   path(\"api/user_profile/\",user_profile),",
        "detail": "mainapp.urls",
        "documentation": {}
    },
    {
        "label": "PDF",
        "kind": 6,
        "importPath": "mainapp.views",
        "description": "mainapp.views",
        "peekOfCode": "class PDF(FPDF):\n    def create_table(self, table_data, title='', data_size = 10, title_size=15, align_data='L', align_header='L', cell_width='even', x_start='x_default',emphasize_data=[], emphasize_style=None,emphasize_color=(0,0,0)): \n        \"\"\"\n        table_data: \n                    list of lists with first element being list of headers\n        title: \n                    (Optional) title of table (optional)\n        data_size: \n                    the font size of table data\n        title_size: ",
        "detail": "mainapp.views",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 2,
        "importPath": "mainapp.views",
        "description": "mainapp.views",
        "peekOfCode": "def register(request):\n    if request.method == \"POST\":\n        email = request.data.get(\"email\")  # Use email as the username\n        password = request.data.get(\"password\")\n        if not email or not password:\n            return Response({\"error\": \"Email and password are required\"}, status=status.HTTP_400_BAD_REQUEST)\n        if User.objects.filter(username=email).exists():\n            return Response({\"error\": \"Email already exists\"}, status=status.HTTP_400_BAD_REQUEST)\n        user = User.objects.create_user(username=email, email=email, password=password)\n        user.save()",
        "detail": "mainapp.views",
        "documentation": {}
    },
    {
        "label": "send_otp",
        "kind": 2,
        "importPath": "mainapp.views",
        "description": "mainapp.views",
        "peekOfCode": "def send_otp(request):\n    if request.method == 'POST':\n        email = request.data.get('email')\n        try:\n            # Generate OTP\n            otp = generate_otp()\n            # Save OTP to database\n            OTP.objects.create(email=email, otp=otp)\n            # Render the HTML template\n            html_content = render_to_string('otp_email_template.html', {'otp': otp, 'email':email})",
        "detail": "mainapp.views",
        "documentation": {}
    },
    {
        "label": "verify_otp",
        "kind": 2,
        "importPath": "mainapp.views",
        "description": "mainapp.views",
        "peekOfCode": "def verify_otp(request):\n    if request.method == 'POST':\n        otp = request.data.get('otp')\n        try:\n                otp_record = OTP.objects.get(otp=otp)\n                otp_record.attempts += 1  \n                otp_record.save()  \n                if (timezone.now() - otp_record.created_at).seconds > 120:\n                    otp_record.delete()  \n                    return Response({'message': ' Otp Expired'})",
        "detail": "mainapp.views",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": "mainapp.views",
        "description": "mainapp.views",
        "peekOfCode": "def login(request):\n    email = request.data.get(\"email\")\n    password = request.data.get(\"password\")\n    if not email or not password:\n        return Response({\"error\": \"Email and password are required\"}, status=status.HTTP_400_BAD_REQUEST)\n    user = authenticate(request, username=email, password=password)\n    if not user:\n        return Response({\"error\": \"Email or Password is wrong!\"}, status=status.HTTP_401_UNAUTHORIZED)\n    if not user.is_active:\n        return Response({\"error\": \"Account is inactive\"}, status=status.HTTP_401_UNAUTHORIZED)",
        "detail": "mainapp.views",
        "documentation": {}
    },
    {
        "label": "Password_reset_send_otp",
        "kind": 2,
        "importPath": "mainapp.views",
        "description": "mainapp.views",
        "peekOfCode": "def Password_reset_send_otp(request):\n    email = request.data.get('email')\n    print(email)\n    try:\n        # Check if the user exists\n        existing_user = User.objects.get(username=email)\n        if existing_user:\n            print(\"existing_user\", existing_user)\n            # Generate OTP\n            otp = generate_otp()",
        "detail": "mainapp.views",
        "documentation": {}
    },
    {
        "label": "reset_password",
        "kind": 2,
        "importPath": "mainapp.views",
        "description": "mainapp.views",
        "peekOfCode": "def reset_password(request):\n    email =  request.data.get('email')\n    new_password = request.data.get('newpassword')\n    try:\n        user = User.objects.get(username=email)\n        if user:\n            user.set_password(new_password)\n            user.save()\n            return Response({\"message\": \"Password changed successfully\"}, status=status.HTTP_200_OK)\n    except User.DoesNotExist:",
        "detail": "mainapp.views",
        "documentation": {}
    },
    {
        "label": "google_register",
        "kind": 2,
        "importPath": "mainapp.views",
        "description": "mainapp.views",
        "peekOfCode": "def google_register(request):\n    email = request.data.get(\"email\")  \n    if User.objects.filter(username=email).exists():\n        return Response({\"error\": \"Email already exists\"}, status=status.HTTP_400_BAD_REQUEST)\n    user = User.objects.create_user(username=email)\n    user.save()\n    UserProfile.objects.create(user=user)\n    return Response({\"message\": \"User created successfully\"}, status=status.HTTP_201_CREATED)\n# User Login and Token Generation\n@api_view([\"POST\"])",
        "detail": "mainapp.views",
        "documentation": {}
    },
    {
        "label": "google_login",
        "kind": 2,
        "importPath": "mainapp.views",
        "description": "mainapp.views",
        "peekOfCode": "def google_login(request):\n    if request.method == \"POST\":\n        email = request.data.get(\"email\")\n        if not email:\n            return Response({\"error\": \"Email and password are required\"}, status=status.HTTP_400_BAD_REQUEST)\n        user= User.objects.filter(username=email).first()\n        if not user:\n            return Response({\"error\": \"Email or Password is wrong!\"}, status=status.HTTP_401_UNAUTHORIZED)\n        refresh = RefreshToken.for_user(user)\n        access_token = str(refresh.access_token)",
        "detail": "mainapp.views",
        "documentation": {}
    },
    {
        "label": "refresh_access_token",
        "kind": 2,
        "importPath": "mainapp.views",
        "description": "mainapp.views",
        "peekOfCode": "def refresh_access_token(request):\n    refresh_token = request.data.get('refresh_token')\n    if not refresh_token:\n        return Response({\"error\": \"Refresh token is required\"}, status=status.HTTP_400_BAD_REQUEST)\n    try:\n        refresh = RefreshToken(refresh_token)\n        new_access_token = str(refresh.access_token)\n        return Response({\n            'access_token': new_access_token\n        }, status=status.HTTP_200_OK)",
        "detail": "mainapp.views",
        "documentation": {}
    },
    {
        "label": "user_profile",
        "kind": 2,
        "importPath": "mainapp.views",
        "description": "mainapp.views",
        "peekOfCode": "def user_profile(request):\n    profile = get_object_or_404(UserProfile,user=request.user)\n    if request.method == 'GET':\n        serializer = UserProfileSerializer(profile)\n        return Response(serializer.data)\n    elif request.method in ['PUT', 'PATCH']:\n        serializer = UserProfileSerializer(profile, data=request.data, partial=(request.method == 'PATCH'))\n        if request.FILES.get('profile_picture'):\n            profile.profile_picture = request.FILES['profile_picture']\n        if serializer.is_valid():",
        "detail": "mainapp.views",
        "documentation": {}
    },
    {
        "label": "surgery",
        "kind": 2,
        "importPath": "mainapp.views",
        "description": "mainapp.views",
        "peekOfCode": "def surgery(request, surgery_id=None):\n    if surgery_id:\n        surgery_instance = get_object_or_404(Surgery, id=surgery_id, user=request.user)\n    if request.method == 'GET':\n        if surgery_id: \n            serializer = SurgerySerializer(surgery_instance)\n            return Response(serializer.data)\n        else: \n            user_surgery_data = Surgery.objects.filter(user=request.user)\n            if user_surgery_data:",
        "detail": "mainapp.views",
        "documentation": {}
    },
    {
        "label": "export_surgery_to_excel",
        "kind": 2,
        "importPath": "mainapp.views",
        "description": "mainapp.views",
        "peekOfCode": "def export_surgery_to_excel(request):\n    # Create a new workbook and activate a worksheet\n    wb = Workbook()\n    ws = wb.active\n    ws.title = \"Surgery Data\"\n    # Define the column headers\n    headers = ['ID', 'User', 'Name of Surgery', 'Type of Surgery', 'Complications']\n    ws.append(headers)\n    # Get surgery data\n    surgeries = Surgery.objects.filter(user=request.user)",
        "detail": "mainapp.views",
        "documentation": {}
    },
    {
        "label": "export_surgery_to_pdf",
        "kind": 2,
        "importPath": "mainapp.views",
        "description": "mainapp.views",
        "peekOfCode": "def export_surgery_to_pdf(request):\n    # Create the PDF\n    pdf = PDF()\n    pdf.add_page()\n    pdf.set_font(\"Times\", size=10)\n    # Define header and rows\n    data = [\n        [\"ID\", \"User\", \"Name of Surgery\", \"Type of Surgery\", \"Complication fgdfg shgfghfghfg\", \"Complications\"]\n    ]\n    # Fetch surgery data dynamically",
        "detail": "mainapp.views",
        "documentation": {}
    },
    {
        "label": "export_surgery_to_google_sheets",
        "kind": 2,
        "importPath": "mainapp.views",
        "description": "mainapp.views",
        "peekOfCode": "def export_surgery_to_google_sheets(request):\n    # Set up the credentials and authenticate with Google Sheets API\n    scope = [\"https://spreadsheets.google.com/feeds\", \"https://www.googleapis.com/auth/drive\"]\n    creds = ServiceAccountCredentials.from_json_keyfile_name(settings.GOOGLE_SHEET_CREDS_JSON, scope)\n    client = gspread.authorize(creds)\n    # Create or open a Google Sheet\n    spreadsheet = client.create('Surgery Data')\n    sheet = spreadsheet.get_worksheet(0)\n    # Add the headers to the Google Sheet\n    headers = ['ID', 'User', 'Name of Surgery', 'Type of Surgery', 'Complications']",
        "detail": "mainapp.views",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "medworld.asgi",
        "description": "medworld.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "medworld.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "medworld.settings",
        "description": "medworld.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure--l%rm*&6sp(j*hn93$dvjd!(jhloy0iq_g@0f^)#433(7wq3a^'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = [\"67cb-115-127-156-9.ngrok-free.app\"]\n# Application definition\nINSTALLED_APPS = [",
        "detail": "medworld.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "medworld.settings",
        "description": "medworld.settings",
        "peekOfCode": "SECRET_KEY = 'django-insecure--l%rm*&6sp(j*hn93$dvjd!(jhloy0iq_g@0f^)#433(7wq3a^'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = [\"67cb-115-127-156-9.ngrok-free.app\"]\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',",
        "detail": "medworld.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "medworld.settings",
        "description": "medworld.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = [\"67cb-115-127-156-9.ngrok-free.app\"]\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "medworld.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "medworld.settings",
        "description": "medworld.settings",
        "peekOfCode": "ALLOWED_HOSTS = [\"67cb-115-127-156-9.ngrok-free.app\"]\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'mainapp',",
        "detail": "medworld.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "medworld.settings",
        "description": "medworld.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'mainapp',\n    'rest_framework',\n    'rest_framework_simplejwt',",
        "detail": "medworld.settings",
        "documentation": {}
    },
    {
        "label": "REST_FRAMEWORK",
        "kind": 5,
        "importPath": "medworld.settings",
        "description": "medworld.settings",
        "peekOfCode": "REST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': [\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n    ],\n}\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',",
        "detail": "medworld.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "medworld.settings",
        "description": "medworld.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\nROOT_URLCONF = 'medworld.urls'",
        "detail": "medworld.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "medworld.settings",
        "description": "medworld.settings",
        "peekOfCode": "ROOT_URLCONF = 'medworld.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "medworld.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "medworld.settings",
        "description": "medworld.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "medworld.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "medworld.settings",
        "description": "medworld.settings",
        "peekOfCode": "WSGI_APPLICATION = 'medworld.wsgi.application'\nfrom datetime import timedelta\nSIMPLE_JWT = {\n    'ACCESS_TOKEN_LIFETIME': timedelta(hours=1),  # Set the access token lifetime to 1 hour\n    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),   # Optional: Set the refresh token lifetime (e.g., 7 days)\n    'ROTATE_REFRESH_TOKENS': False,  # Optional: Whether to rotate refresh tokens\n    'BLACKLIST_AFTER_ROTATION': False,  # Optional: Whether to blacklist old refresh tokens after rotation\n    'ALGORITHM': 'HS256',  # The algorithm to use for encoding the tokens\n    'SIGNING_KEY': 'your_secret_key',  # Your JWT signing key\n    'VERIFYING_KEY': None,  # Optional: If you use a public key to verify JWTs",
        "detail": "medworld.settings",
        "documentation": {}
    },
    {
        "label": "SIMPLE_JWT",
        "kind": 5,
        "importPath": "medworld.settings",
        "description": "medworld.settings",
        "peekOfCode": "SIMPLE_JWT = {\n    'ACCESS_TOKEN_LIFETIME': timedelta(hours=1),  # Set the access token lifetime to 1 hour\n    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),   # Optional: Set the refresh token lifetime (e.g., 7 days)\n    'ROTATE_REFRESH_TOKENS': False,  # Optional: Whether to rotate refresh tokens\n    'BLACKLIST_AFTER_ROTATION': False,  # Optional: Whether to blacklist old refresh tokens after rotation\n    'ALGORITHM': 'HS256',  # The algorithm to use for encoding the tokens\n    'SIGNING_KEY': 'your_secret_key',  # Your JWT signing key\n    'VERIFYING_KEY': None,  # Optional: If you use a public key to verify JWTs\n    'AUDIENCE': None,  # Optional: Specify audience\n    'ISSUER': None,  # Optional: Specify issuer",
        "detail": "medworld.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "medworld.settings",
        "description": "medworld.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation\n# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {",
        "detail": "medworld.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "medworld.settings",
        "description": "medworld.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "medworld.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "medworld.settings",
        "description": "medworld.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "medworld.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "medworld.settings",
        "description": "medworld.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'",
        "detail": "medworld.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "medworld.settings",
        "description": "medworld.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nEMAIL_HOST = 'smtp.gmail.com'",
        "detail": "medworld.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "medworld.settings",
        "description": "medworld.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nEMAIL_HOST = 'smtp.gmail.com'\nEMAIL_PORT = 587",
        "detail": "medworld.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "medworld.settings",
        "description": "medworld.settings",
        "peekOfCode": "STATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nEMAIL_HOST = 'smtp.gmail.com'\nEMAIL_PORT = 587\nEMAIL_USE_TLS = True\nEMAIL_HOST_USER = 'hijabpoint374@gmail.com'\nEMAIL_HOST_PASSWORD = 'sbog hrdj icpg zodj'",
        "detail": "medworld.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "medworld.settings",
        "description": "medworld.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nEMAIL_HOST = 'smtp.gmail.com'\nEMAIL_PORT = 587\nEMAIL_USE_TLS = True\nEMAIL_HOST_USER = 'hijabpoint374@gmail.com'\nEMAIL_HOST_PASSWORD = 'sbog hrdj icpg zodj'\nGOOGLE_SHEET_CREDS_JSON = \"729859196271-iaj8ikvst39t6s4vppa5kfme3ohnifo1.apps.googleusercontent.com\"",
        "detail": "medworld.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_BACKEND",
        "kind": 5,
        "importPath": "medworld.settings",
        "description": "medworld.settings",
        "peekOfCode": "EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nEMAIL_HOST = 'smtp.gmail.com'\nEMAIL_PORT = 587\nEMAIL_USE_TLS = True\nEMAIL_HOST_USER = 'hijabpoint374@gmail.com'\nEMAIL_HOST_PASSWORD = 'sbog hrdj icpg zodj'\nGOOGLE_SHEET_CREDS_JSON = \"729859196271-iaj8ikvst39t6s4vppa5kfme3ohnifo1.apps.googleusercontent.com\"",
        "detail": "medworld.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST",
        "kind": 5,
        "importPath": "medworld.settings",
        "description": "medworld.settings",
        "peekOfCode": "EMAIL_HOST = 'smtp.gmail.com'\nEMAIL_PORT = 587\nEMAIL_USE_TLS = True\nEMAIL_HOST_USER = 'hijabpoint374@gmail.com'\nEMAIL_HOST_PASSWORD = 'sbog hrdj icpg zodj'\nGOOGLE_SHEET_CREDS_JSON = \"729859196271-iaj8ikvst39t6s4vppa5kfme3ohnifo1.apps.googleusercontent.com\"",
        "detail": "medworld.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_PORT",
        "kind": 5,
        "importPath": "medworld.settings",
        "description": "medworld.settings",
        "peekOfCode": "EMAIL_PORT = 587\nEMAIL_USE_TLS = True\nEMAIL_HOST_USER = 'hijabpoint374@gmail.com'\nEMAIL_HOST_PASSWORD = 'sbog hrdj icpg zodj'\nGOOGLE_SHEET_CREDS_JSON = \"729859196271-iaj8ikvst39t6s4vppa5kfme3ohnifo1.apps.googleusercontent.com\"",
        "detail": "medworld.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_USE_TLS",
        "kind": 5,
        "importPath": "medworld.settings",
        "description": "medworld.settings",
        "peekOfCode": "EMAIL_USE_TLS = True\nEMAIL_HOST_USER = 'hijabpoint374@gmail.com'\nEMAIL_HOST_PASSWORD = 'sbog hrdj icpg zodj'\nGOOGLE_SHEET_CREDS_JSON = \"729859196271-iaj8ikvst39t6s4vppa5kfme3ohnifo1.apps.googleusercontent.com\"",
        "detail": "medworld.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST_USER",
        "kind": 5,
        "importPath": "medworld.settings",
        "description": "medworld.settings",
        "peekOfCode": "EMAIL_HOST_USER = 'hijabpoint374@gmail.com'\nEMAIL_HOST_PASSWORD = 'sbog hrdj icpg zodj'\nGOOGLE_SHEET_CREDS_JSON = \"729859196271-iaj8ikvst39t6s4vppa5kfme3ohnifo1.apps.googleusercontent.com\"",
        "detail": "medworld.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST_PASSWORD",
        "kind": 5,
        "importPath": "medworld.settings",
        "description": "medworld.settings",
        "peekOfCode": "EMAIL_HOST_PASSWORD = 'sbog hrdj icpg zodj'\nGOOGLE_SHEET_CREDS_JSON = \"729859196271-iaj8ikvst39t6s4vppa5kfme3ohnifo1.apps.googleusercontent.com\"",
        "detail": "medworld.settings",
        "documentation": {}
    },
    {
        "label": "GOOGLE_SHEET_CREDS_JSON",
        "kind": 5,
        "importPath": "medworld.settings",
        "description": "medworld.settings",
        "peekOfCode": "GOOGLE_SHEET_CREDS_JSON = \"729859196271-iaj8ikvst39t6s4vppa5kfme3ohnifo1.apps.googleusercontent.com\"",
        "detail": "medworld.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "medworld.urls",
        "description": "medworld.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path('',include(\"mainapp.urls\"))\n]",
        "detail": "medworld.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "medworld.wsgi",
        "description": "medworld.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "medworld.wsgi",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'medworld.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "manage",
        "documentation": {}
    }
]